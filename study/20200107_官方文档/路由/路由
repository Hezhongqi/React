1.React Router 4 的设计哲学
    --一切皆组件
2.React3
    在 React Router 3 中，所有的路由都集中在一个文件中进行管理，这个文件虽说可能表现为一个组件，
    但是其本质就是一个配置文件，所有的路由在初始化的时候就已经确定了，
    在运行时会按照这些 静态 的配置对当前的用户行为进行转发，在实际应用中存在一定的局限性
3.React4
    在 React Router 4 中，不再有集中式的路由管理，<Route> 是一个纯粹的组件，将匹配的 url 进行渲染，
    可以在应用的任何地方使用，成为应用中布局的一部分，编排路由的策略将相当灵活。
    让我们一些示例来逐步解释 React Router 4 新的设计哲学
4.引入 <Switch> 组件减少匹配的执行次数，不然则全部匹配一次
    使用 <Switch> 组件后，路由匹配将使用短路策略，即对 <Route> 逐个尝试匹配，
    如果其中一个规则匹配成功，则直接执行 render ，不再对下面的规则进行匹配，匹配所需要的时间复杂度将从稳定的 O(n) 变为 [O(1), O(n)]
5.在绝大多数的场景下，你都应该遵循 单一职责 的原则 来拆分和管理你的模块，
    让每一个模块保持清晰和明确的功能维度。
    不要把所有的功能都放在一个模块里进行管理，一个模块的功能越多，熵值越高，稳定性越差，可维护性越低