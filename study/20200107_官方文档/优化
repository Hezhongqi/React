关于如何进行组件（模块）的拆分和抽象，以下是我的一些建议：
• 不要过早进行优化，不要过度设计
• 仔细分析业务场景，结合业务场景判断哪些是目前是需要抽象和复用的部分，哪些是将来可能被复用的部分，优先抽象和拆分当前需要被复用的部分
• 如果一个组件（模块）中的代码超过了 200 行（80 columns），那么这个组件一定有可优化的空间或存在被拆分的必要
• 确定需要抽象的层级在哪里。越高层的抽象的能力越强，能够覆盖的场景范围就越大，但同时也损失了易用性。越低层的抽象易用性越强，但是可以覆盖的场景的范围会相对缩小
• 一个组件（模块）尽量确保单一职责，如果一个模块或组件承担的职责过多，那么这些职责之间难免产生相互依赖，其中一个职责的变化可能会影响另一个职责的履行
• 在业务实现过程中不断思考并进行小范围的代码重构，对项目进行优化并沉淀经验